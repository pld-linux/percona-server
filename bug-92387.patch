commit 95e3a1a52dbe8fc21eb0410540853db531254a24
Author: Nisha Gopalakrishnan <nisha.gopalakrishnan@oracle.com>
Date:   Wed Oct 9 07:03:55 2019 +0530

    BUG#29836204: P_S TABLE ACCESS HANGS WHILE IN LOCK TABLES MODE
    
    Analysis
    ========
    
    Querying the performance_schema tables like "session variables"
    under LOCK TABLE MODE while there is a meta data change for the
    table locked caused the performance_schema query to hang in
    "opening_tables" state.
    
    While opening the performance_schema internal temporary table
    in "open_table", the table share version was compared with the
    share version of the opened tables(i.e in this case the table
    which was altered using ALTER TABLE under lock table mode)/
    Since the share version was different, the retry logic for
    opening tables was triggered. This continued in a loop since
    the table share version was always different.
    
    Fix
    ===
    While opening performance_schema tables, the flag
    'MYSQL_OPEN_IGNORE_FLUSH' is set since FLUSH TABLES/share
    version comparison does not apply for performance_schema tables.
    Querying the P_S tables should be allowed in lock table mode.
    
    Change-Id: I4ac73dbfb9e67076a6297fcaa184c3d2606ffd40

diff --git a/mysql-test/r/lock.result b/mysql-test/r/lock.result
index b9d5b025f0e..0712289c8e6 100644
--- a/mysql-test/r/lock.result
+++ b/mysql-test/r/lock.result
@@ -471,3 +471,28 @@ DROP TABLE m1, t1;
 #
 # End of 6.0 tests.
 #
+#
+# Bug#29836204:  P_S TABLE ACCESS HANGS WHILE IN LOCK TABLES MODE
+#
+SET @saved_show_compatibility_56= @@global.show_compatibility_56;
+# Ensures that the P_S is used for the SHOW command.
+SET GLOBAL show_compatibility_56= OFF;
+CREATE TABLE t1(fld1 int) ENGINE=MYISAM;
+LOCK TABLE t1 WRITE;
+ALTER TABLE t1 DISABLE KEYS;
+# Without patch, the SHOW command hangs.
+SHOW SESSION VARIABLES LIKE 'FOREIGN_KEY_CHECKS';
+Variable_name	Value
+foreign_key_checks	ON
+# Wihout patch, the SELECT from P_S hangs.
+SELECT * FROM performance_schema.global_variables WHERE variable_name="read_only";
+VARIABLE_NAME	VARIABLE_VALUE
+read_only	OFF
+# Test added for coverage (Querying from I_S)
+SET GLOBAL show_compatibility_56= @saved_show_compatibility_56;
+SHOW SESSION VARIABLES LIKE 'FOREIGN_KEY_CHECKS';
+Variable_name	Value
+foreign_key_checks	ON
+# Clean up.
+UNLOCK TABLES;
+DROP TABLE t1;
diff --git a/mysql-test/t/lock.test b/mysql-test/t/lock.test
index 2fd69a23fac..4a8ecf141e2 100644
--- a/mysql-test/t/lock.test
+++ b/mysql-test/t/lock.test
@@ -583,6 +583,33 @@ DROP TABLE m1, t1;
 --echo # End of 6.0 tests.
 --echo #
 
+
+--echo #
+--echo # Bug#29836204:  P_S TABLE ACCESS HANGS WHILE IN LOCK TABLES MODE
+--echo #
+
+SET @saved_show_compatibility_56= @@global.show_compatibility_56;
+--echo # Ensures that the P_S is used for the SHOW command.
+SET GLOBAL show_compatibility_56= OFF;
+CREATE TABLE t1(fld1 int) ENGINE=MYISAM;
+LOCK TABLE t1 WRITE;
+ALTER TABLE t1 DISABLE KEYS;
+
+--echo # Without patch, the SHOW command hangs.
+SHOW SESSION VARIABLES LIKE 'FOREIGN_KEY_CHECKS';
+
+--echo # Wihout patch, the SELECT from P_S hangs.
+SELECT * FROM performance_schema.global_variables WHERE variable_name="read_only";
+
+--echo # Test added for coverage (Querying from I_S)
+SET GLOBAL show_compatibility_56= @saved_show_compatibility_56;
+SHOW SESSION VARIABLES LIKE 'FOREIGN_KEY_CHECKS';
+
+--echo # Clean up.
+UNLOCK TABLES;
+DROP TABLE t1;
+
+
 # Check that all connections opened by test cases in this file are really
 # gone so execution of other tests won't be affected by their presence.
 --source include/wait_until_count_sessions.inc
diff --git a/sql/sql_base.cc b/sql/sql_base.cc
index 567920cfb61..d23772910d2 100644
--- a/sql/sql_base.cc
+++ b/sql/sql_base.cc
@@ -3051,6 +3051,14 @@ bool open_table(THD *thd, TABLE_LIST *table_list, Open_table_context *ot_ctx)
     DBUG_RETURN(true);
   }
 
+  /*
+    P_S table access should be allowed while in LTM, the ignore flush flag is
+    set to avoid the infinite reopening of the table due to version number
+    mismatch.
+  */
+  if (BELONGS_TO_P_S_UNDER_LTM(thd, table_list))
+    flags|= MYSQL_OPEN_IGNORE_FLUSH;
+
   key_length= get_table_def_key(table_list, &key);
 
   /*
