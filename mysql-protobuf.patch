--- mysql-5.7.27/rapid/plugin/x/ngs/include/ngs_common/protocol_protobuf.h.orig	2019-06-10 16:43:20.000000000 +0200
+++ mysql-5.7.27/rapid/plugin/x/ngs/include/ngs_common/protocol_protobuf.h	2019-07-29 19:19:29.421629353 +0200
@@ -29,7 +29,9 @@
 #include <google/protobuf/io/tokenizer.h>
 #include <google/protobuf/io/zero_copy_stream.h>
 #include <google/protobuf/wire_format_lite.h>
+#if GOOGLE_PROTOBUF_VERSION < 3008000
 #include <google/protobuf/wire_format_lite_inl.h>
+#endif
 #include <google/protobuf/dynamic_message.h>
 
 #include "mysqlx_connection.pb.h"
--- percona-server-5.7.44-48/rapid/plugin/x/ngs/src/protocol_decoder.cc.orig	2023-11-30 19:53:18.000000000 +0100
+++ percona-server-5.7.44-48/rapid/plugin/x/ngs/src/protocol_decoder.cc	2024-09-23 06:16:10.330576008 +0200
@@ -123,7 +123,7 @@ Error_code Message_decoder::parse(Reques
     google::protobuf::io::CodedInputStream stream(reinterpret_cast<const uint8_t*>(request.buffer()),
                                                   static_cast<int>(request.buffer_size()));
     // variable 'mysqlx_max_allowed_packet' has been checked when buffer was filling by data
-    stream.SetTotalBytesLimit(static_cast<int>(request.buffer_size()), -1 /*no warnings*/);
+    stream.SetTotalBytesLimit(static_cast<int>(request.buffer_size()));
     // Protobuf limits the number of nested objects when decoding messages
     // lets set the value in explicit way (to ensure that is set accordingly with
     // out stack size)
--- percona-server-5.7.44-48/rapid/plugin/x/mysqlxtest_src/mysqlxtest.cc.orig	2023-11-30 19:53:18.000000000 +0100
+++ percona-server-5.7.44-48/rapid/plugin/x/mysqlxtest_src/mysqlxtest.cc	2024-09-23 06:24:17.203438495 +0200
@@ -629,12 +629,12 @@ class ErrorDumper : public ::google::pro
   std::stringstream m_out;
 
 public:
-  virtual void AddError(int line, int column, const string & message)
+  virtual void AddError(int line, google::protobuf::io::ColumnNumber column, const std::string & message)
   {
     m_out << "ERROR in message: line " << line+1 << ": column " << column << ": " << message<<"\n";
   }
 
-  virtual void AddWarning(int line, int column, const string & message)
+  virtual void AddWarning(int line, google::protobuf::io::ColumnNumber column, const std::string & message)
   {
     m_out << "WARNING in message: line " << line+1 << ": column " << column << ": " << message<<"\n";
   }
